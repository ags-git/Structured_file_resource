CREATE TYPE compliance_status AS ENUM ('non_compliant', 'warning', 'compliant');
CREATE TYPE rule_type AS ENUM ('literal', 'dictionary', 'pattern');

-- Домены данных
CREATE TABLE data_domain (
    data_domain_s INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    is_displayed BOOLEAN NOT NULL DEFAULT true,
    key_business_obj_class VARCHAR(255) NOT NULL,
    CONSTRAINT c_data_domain_pk PRIMARY KEY (data_domain_s),
    CONSTRAINT c_data_domain_name_unq UNIQUE (name),
    CONSTRAINT c_data_domain_name_chk CHECK (length(trim(name)) > 0),
    CONSTRAINT c_data_domain_key_obj_chk CHECK (length(trim(key_business_obj_class)) > 0)
);

-- Информационные ресурсы
CREATE TABLE information_resource (
    information_resource_s INTEGER GENERATED BY DEFAULT AS IDENTITY,
    data_domain_s INTEGER NOT NULL,
    path VARCHAR(1024) NOT NULL,
    name VARCHAR(255) NOT NULL,
    scan_schedule VARCHAR(255),
    path_to_mount VARCHAR(255) NOT NULL,
    data_domain_path VARCHAR(100),
    CONSTRAINT c_information_resource_pk PRIMARY KEY (information_resource_s),
    CONSTRAINT c_information_resource_data_domain_fk FOREIGN KEY (data_domain_s) REFERENCES data_domain (data_domain_s) ON DELETE CASCADE,
    CONSTRAINT c_information_resource_path_unq UNIQUE (path),
    CONSTRAINT c_information_resource_path_chk CHECK (path ~ '^//[^/]+/[^/]+'),
    CONSTRAINT c_information_resource_name_chk CHECK (length(trim(name)) > 0),
    CONSTRAINT c_information_resource_mount_chk CHECK (length(trim(path_to_mount)) > 0)
);

-- Пользователи
CREATE TABLE users (
    users_s INTEGER GENERATED BY DEFAULT AS IDENTITY,
    username VARCHAR(255) NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    email VARCHAR(255),
    CONSTRAINT c_users_pk PRIMARY KEY (users_s),
    CONSTRAINT c_users_username_unq UNIQUE (username),
    CONSTRAINT c_users_username_chk CHECK (length(trim(username)) > 0),
    CONSTRAINT c_users_email_chk CHECK (email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')
);

-- Права доступа пользователей к доменам
CREATE TABLE user_domain_access (
    users_s INTEGER,
    data_domain_s INTEGER,
    CONSTRAINT c_user_domain_access_pk PRIMARY KEY (users_s, data_domain_s),
    CONSTRAINT c_user_domain_access_users_fk FOREIGN KEY (users_s) REFERENCES users (users_s) ON DELETE CASCADE,
    CONSTRAINT c_user_domain_access_data_domain_fk FOREIGN KEY (data_domain_s) REFERENCES data_domain (data_domain_s) ON DELETE CASCADE
);

-- Справочники из НСИ
CREATE TABLE dictionary (
    dictionary_s INTEGER GENERATED BY DEFAULT AS IDENTITY,
    code VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    is_actual BOOLEAN NOT NULL DEFAULT true,
    CONSTRAINT c_dictionary_pk PRIMARY KEY (dictionary_s),
    CONSTRAINT c_dictionary_code_unq UNIQUE (code),
    CONSTRAINT c_dictionary_code_chk CHECK (length(trim(code)) > 0),
    CONSTRAINT c_dictionary_name_chk CHECK (length(trim(name)) > 0)
);

-- Значения справочников
CREATE TABLE nsi_data (
    nsi_data_s INTEGER GENERATED BY DEFAULT AS IDENTITY,
    dictionary_s INTEGER NOT NULL,
    entity_id VARCHAR(255) NOT NULL,
    entity_name VARCHAR(255) NOT NULL,
    is_actual BOOLEAN NOT NULL DEFAULT true,
    types JSONB,
    attributes JSONB,
    CONSTRAINT c_nsi_data_pk PRIMARY KEY (nsi_data_s),
    CONSTRAINT c_nsi_data_dictionary_fk FOREIGN KEY (dictionary_s) REFERENCES dictionary (dictionary_s) ON DELETE CASCADE,
    CONSTRAINT c_nsi_data_entity_id_chk CHECK (length(trim(entity_id)) > 0),
    CONSTRAINT c_nsi_data_entity_name_chk CHECK (length(trim(entity_name)) > 0),
    CONSTRAINT c_nsi_data_entity_id_dict_unq UNIQUE (dictionary_s, entity_id)
);

-- Связи между элементами справочников
CREATE TABLE nsi_data_x (
    nsi_data_x_s INTEGER GENERATED BY DEFAULT AS IDENTITY,
    nsi_data_s INTEGER NOT NULL,
    dependent_on INTEGER NOT NULL,
    CONSTRAINT c_nsi_data_x_pk PRIMARY KEY (nsi_data_x_s),
    CONSTRAINT c_nsi_data_x_nsi_data_fk FOREIGN KEY (nsi_data_s) REFERENCES nsi_data (nsi_data_s) ON DELETE CASCADE,
    CONSTRAINT c_nsi_data_x_dependent_fk FOREIGN KEY (dependent_on) REFERENCES nsi_data (nsi_data_s),
    CONSTRAINT c_nsi_data_x_self_ref_chk CHECK (nsi_data_s != dependent_on)
);

-- Уровни эталонной структуры
CREATE TABLE reference_structure_level (
    reference_structure_level_s INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(50) NOT NULL,
    CONSTRAINT c_reference_structure_level_pk PRIMARY KEY (reference_structure_level_s),
    CONSTRAINT c_reference_structure_level_name_unq UNIQUE (name),
    CONSTRAINT c_reference_structure_level_name_chk CHECK (name IN ('top', 'toc', 'detail'))
);

-- Эталонные структуры
CREATE TABLE reference_structure (
    reference_structure_s INTEGER GENERATED BY DEFAULT AS IDENTITY,
    information_resource_s INTEGER NOT NULL,
    reference_structure_level_s INTEGER NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    CONSTRAINT c_reference_structure_pk PRIMARY KEY (reference_structure_s),
    CONSTRAINT c_reference_structure_info_res_fk FOREIGN KEY (information_resource_s) REFERENCES information_resource (information_resource_s) ON DELETE CASCADE,
    CONSTRAINT c_reference_structure_level_fk FOREIGN KEY (reference_structure_level_s) REFERENCES reference_structure_level (reference_structure_level_s),
    CONSTRAINT c_reference_structure_name_chk CHECK (length(trim(name)) > 0)
);

